# Phoenix v3 Working Configuration with 3 Pipelines
# Compatible with OpenTelemetry Collector v0.103.1
#
# NOTE: config_sources is not supported in v0.103.1
# Workaround: Use environment variables for dynamic values and restart collector for changes
# Control file changes require collector restart to take effect

receivers:
  hostmetrics/process_focus:
    collection_interval: 15s
    root_path: /hostfs
    scrapers:
      process:
        metrics:
          process.cpu.time: {enabled: true}
          process.memory.usage: {enabled: true}
          process.disk.io: {enabled: true}
          process.threads: {enabled: true}
          process.open_file_descriptors: {enabled: true}
        mute_process_name_error: true
        resource_attributes:
          process.executable.name: {enabled: true}
          process.command_line: {enabled: true}
          process.owner: {enabled: true}
          process.pid: {enabled: true}

  otlp:
    protocols:
      http: {endpoint: "0.0.0.0:4318"}

processors:
  # Memory limiters for each pipeline
  memory_limiter/common:
    check_interval: 1s
    limit_mib: 800
    spike_limit_mib: 200
  
  memory_limiter/full:
    check_interval: 1s
    limit_mib: 300
    spike_limit_mib: 100
    
  memory_limiter/optimised:
    check_interval: 1s
    limit_mib: 300
    spike_limit_mib: 100
    
  memory_limiter/experimental:
    check_interval: 1s
    limit_mib: 200
    spike_limit_mib: 50

  resourcedetection/common:
    detectors: [env, system]
    timeout: 2s
    system:
      hostname_sources: ["os"]

  # Add common attributes
  attributes/common:
    actions:
      - key: benchmark.id
        value: ${env:BENCHMARK_ID}
        action: upsert
      - key: deployment.environment
        value: ${env:DEPLOYMENT_ENV}
        action: upsert
      - key: phoenix.optimization_profile
        value: ${env:OPTIMIZATION_PROFILE}
        action: upsert

  # Pipeline tagging
  attributes/full:
    actions:
      - key: phoenix.pipeline.strategy
        value: "full_fidelity"
        action: upsert

  attributes/optimised:
    actions:
      - key: phoenix.pipeline.strategy
        value: "optimised"
        action: upsert

  attributes/experimental:
    actions:
      - key: phoenix.pipeline.strategy
        value: "experimental_topk"
        action: upsert

  # Priority classification
  attributes/priority_high:
    actions:
      - key: phoenix.priority
        value: "high"
        action: upsert

  attributes/priority_medium:
    actions:
      - key: phoenix.priority
        value: "medium"
        action: upsert

  attributes/priority_low:
    actions:
      - key: phoenix.priority
        value: "low"
        action: upsert

  # Filter for high priority
  filter/priority_high:
    error_mode: ignore
    metrics:
      include:
        match_type: regexp
        expressions:
          - ".*"
        resource_attributes:
          - key: process.executable.name
            value: "^(java_app|python_api|node_gateway).*$"

  # Filter for medium priority
  filter/priority_medium:
    error_mode: ignore
    metrics:
      include:
        match_type: regexp
        expressions:
          - ".*"
        resource_attributes:
          - key: process.executable.name
            value: "^(nginx|postgres|data_pipeline).*$"

  # Filter for optimised pipeline
  filter/optimised:
    error_mode: ignore
    metrics:
      exclude:
        match_type: regexp
        resource_attributes:
          - key: process.executable.name
            value: "^(kworker|rcu_|migration|ksoftirqd|cpuhp).*$"

  # Filter for experimental pipeline - only high-value metrics
  filter/experimental:
    error_mode: ignore
    metrics:
      include:
        match_type: regexp
        resource_attributes:
          - key: process.executable.name
            value: "(java_|python_|node_)"

  # Attribute removal for optimised pipeline
  attributes/optimised_cleanup:
    actions:
      - key: process.command_line
        action: delete
      - key: process.pid
        action: delete

  # Attribute removal for experimental pipeline
  attributes/experimental_cleanup:
    actions:
      - key: process.command_line
        action: delete
      - key: process.owner
        action: delete
      - key: process.pid
        action: delete

  batch:
    send_batch_size: 4096
    timeout: 5s
    send_batch_max_size: 8192

exporters:
  prometheus/full:
    endpoint: "0.0.0.0:8888"
    namespace: "phoenix_full"
    resource_to_telemetry_conversion: {enabled: true}
    send_timestamps: true
    metric_expiration: 5m
    enable_open_metrics: true

  prometheus/optimised:
    endpoint: "0.0.0.0:8889"
    namespace: "phoenix_opt"
    resource_to_telemetry_conversion: {enabled: true}
    send_timestamps: true
    metric_expiration: 5m
    enable_open_metrics: true

  prometheus/experimental:
    endpoint: "0.0.0.0:8890"
    namespace: "phoenix_exp"
    resource_to_telemetry_conversion: {enabled: true}
    send_timestamps: true
    metric_expiration: 5m
    enable_open_metrics: true

  logging:
    verbosity: basic
    sampling_initial: 10
    sampling_thereafter: 1000

extensions:
  health_check: 
    endpoint: "0.0.0.0:13133"
    path: "/health"
  pprof: 
    endpoint: "0.0.0.0:1777"
  zpages: 
    endpoint: "0.0.0.0:55679"
  memory_ballast:
    size_mib: 256

connectors:
  forward/full:
  forward/optimised:
  forward/experimental:

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  telemetry:
    metrics: {address: ":8887", level: detailed}
    logs: {level: info, development: false, encoding: json}

  pipelines:
    # Common intake pipeline
    metrics/intake:
      receivers: [hostmetrics/process_focus, otlp]
      processors: 
        - memory_limiter/common
        - resourcedetection/common
        - attributes/common
      exporters: [forward/full, forward/optimised, forward/experimental]

    # Full fidelity pipeline
    metrics/full:
      receivers: [forward/full]
      processors:
        - memory_limiter/full
        - attributes/full
        - batch
      exporters: [prometheus/full, logging]

    # Optimised pipeline - filters out low value metrics
    metrics/optimised:
      receivers: [forward/optimised]
      processors:
        - memory_limiter/optimised
        - filter/optimised
        - attributes/optimised
        - attributes/optimised_cleanup
        - batch
      exporters: [prometheus/optimised]

    # Experimental pipeline - only high priority metrics
    metrics/experimental:
      receivers: [forward/experimental]
      processors:
        - memory_limiter/experimental
        - filter/experimental
        - attributes/experimental
        - attributes/experimental_cleanup
        - batch
      exporters: [prometheus/experimental]