# Phoenix v3 Ultimate Process-Metrics Stack - Environment Configuration
# Revision 2025-05-22 Â· v3.0-final-uX
# Copy this file to .env and fill in your actual values.

# === New Relic API Keys & Endpoint (REQUIRED if ENABLE_NR_EXPORT_* is true) ===
NEW_RELIC_LICENSE_KEY_FULL="YOUR_NR_INGEST_LICENSE_KEY_FULL"
NEW_RELIC_LICENSE_KEY_OPTIMISED="YOUR_NR_INGEST_LICENSE_KEY_OPTIMISED"
NEW_RELIC_LICENSE_KEY_EXPERIMENTAL="YOUR_NR_INGEST_LICENSE_KEY_EXPERIMENTAL"
NEW_RELIC_OTLP_ENDPOINT="https://otlp.nr-data.net:4317" # Ensure no trailing slash

# === New Relic Export Control ===
ENABLE_NR_EXPORT_FULL="false"
ENABLE_NR_EXPORT_OPTIMISED="false"
ENABLE_NR_EXPORT_EXPERIMENTAL="false" # Set to false initially if not actively testing this path

# === Phoenix Bench Identity ===
BENCHMARK_ID="phoenix-v3-ultra-spec"
DEPLOYMENT_ENV="benchmark-ux"
CORRELATION_ID_PREFIX="pv3ux"

# === Adaptive Control Loop Thresholds (for update-control-file.sh) ===
# Based on 'phoenix_opt_ts_active' from the Optimised Pipeline output.
# If phoenix_opt_ts_active < THRESHOLD_OPTIMIZATION_CONSERVATIVE_MAX_TS  => "conservative" profile
# If phoenix_opt_ts_active > THRESHOLD_OPTIMIZATION_AGGRESSIVE_MIN_TS    => "aggressive" profile
# Else                                                                    => "balanced" profile
TARGET_OPTIMIZED_PIPELINE_TS_COUNT=20000 # Controller's "set-point" for PID-lite error calculation
THRESHOLD_OPTIMIZATION_CONSERVATIVE_MAX_TS=15000
THRESHOLD_OPTIMIZATION_AGGRESSIVE_MIN_TS=25000
TARGET_COST_REDUCTION_RATIO_FOR_BALANCED=0.70 # Target for balanced mode

# PID-lite Gains for update-control-file.sh (used to adjust thresholds dynamically)
# These are conceptual for the bash script; it directly sets profile based on fixed thresholds above.
# If script were to adjust thresholds themselves:
# PID_KP=0.20
# PID_KI=0.05

# Update interval for update-control-file.sh (seconds)
ADAPTIVE_CONTROLLER_INTERVAL_SECONDS=60
# Stability period: profile cannot change more frequently than this (seconds)
ADAPTIVE_CONTROLLER_STABILITY_SECONDS=120 # 2 minutes (2x interval as per spec)

# === Synthetic Metrics Generator ===
SYNTHETIC_PROCESS_COUNT_PER_HOST=250
SYNTHETIC_HOST_COUNT=3
SYNTHETIC_METRIC_EMIT_INTERVAL_S=15

# === OTel Collector Resource Hints (Memory is in MiB) ===
OTELCOL_MAIN_MEMORY_LIMIT_MIB="1024" # As per spec table (1GB RAM)
OTELCOL_MAIN_GOMAXPROCS="1"          # As per spec table (1 vCPU)
OTELCOL_MAIN_MEMBALLAST_MIB="256"    # ~25% of limit_mib

OTELCOL_OBSERVER_MEMORY_LIMIT_MIB="256" # As per spec table
OTELCOL_OBSERVER_GOMAXPROCS="1"       # As per spec table
OTELCOL_OBSERVER_MEMBALLAST_MIB="64"

# === Grafana Admin Credentials ===
GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=admin # Change in production!

# === Security - Target Non-Root UID/GID for Collectors ===
# This UID/GID should exist in the otel/opentelemetry-collector-contrib image or be created.
# For simplicity, many run as root inside container for /proc access, but this is for hardening.
TARGET_COLLECTOR_UID="1000"
TARGET_COLLECTOR_GID="1000"

# === Control Signals Path ===
CONTROL_SIGNALS_PATH_IN_CONTAINER="/etc/otelcol/control/optimization_mode.yaml"
# Missing variables for main_working.yaml
CURRENT_OPTIMIZATION_PROFILE=conservative
DEPLOYMENT_ENVIRONMENT=benchmark-ux
OTELCOL_BALLAST_SIZE_MIB=256

# Missing variables
DEPLOYMENT_ENVIRONMENT=development
OTELCOL_BALLAST_SIZE_MIB=256
CURRENT_OPTIMIZATION_PROFILE=conservative
OPTIMIZATION_PROFILE=conservative
