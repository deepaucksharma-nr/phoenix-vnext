version: "3.9"

services:
  ### Workload Generators: Provide diverse, sustained load ###
  stress-ng-cpu-heavy:
    image: polinux/stress-ng:0.17.05
    command: >
      stress-ng --cpu 0 --cpu-load 75 --cpu-method all 
      --matrix 0 --matrix-size 128 --matrix-ops 100000
      --mq 0 --mq-ops 50000
      --process-name-prefix cpu_loadgen_
      --timeout 0s 
    pid: host
    restart: unless-stopped
    deploy:
      resources:
        limits: { cpus: '2.0', memory: '1G' }

  stress-ng-io-heavy:
    image: polinux/stress-ng:0.17.05
    command: >
      stress-ng --io 0 --io-ops 20000 
      --hdd 0 --hdd-bytes 256M --hdd-ops 2500
      --process-name-prefix io_loadgen_
      --timeout 0s
    pid: host
    restart: unless-stopped
    deploy:
      resources:
        limits: { cpus: '1.0', memory: '512M' }

  ### Main OpenTelemetry Collector (Phoenix Simulation) ###
  otelcol-main:
    image: otel/opentelemetry-collector-contrib:0.103.1
    command: ["--config=/etc/otelcol/config.yaml"]
    pid: host
    env_file: .env
    environment:
      CONTROL_SIGNALS_PATH_IN_CONTAINER: /etc/otelcol/control_signals/optimization_mode.yaml
      OTELCOL_MAIN_MEMBALLAST_MIB: ${OTELCOL_MAIN_MEMBALLAST_MIB:-256}
      GOMAXPROCS: ${OTELCOL_MAIN_GOMAXPROCS:-1}
      GOMEMLIMIT: ${OTELCOL_MAIN_MEMORY_LIMIT_MIB:-1024}MiB
    volumes:
      - ./configs/otel/collectors/main.yaml:/etc/otelcol/config.yaml:ro
      - ./configs/control:/etc/otelcol/control_signals:ro
      - ./configs/otel/processors:/etc/otelcol/processors:ro
      - /proc:/hostfs/proc:ro
      - /sys:/hostfs/sys:ro
      - /etc/hostname:/hostfs/etc/hostname:ro
      - ./data/otelcol_main:/var/lib/otelcol/file_storage
    ports:
      - "4318:4318"   # OTLP/HTTP ingest
      - "8888:8888"   # Prometheus: Full pipeline output + collector telemetry
      - "8889:8889"   # Prometheus: Optimised pipeline output
      - "8890:8890"   # Prometheus: Experimental pipeline output
      - "13133:13133" # health_check
      - "1777:1777"   # pprof
      - "55679:55679" # zpages
    depends_on:
      stress-ng-cpu-heavy: {condition: service_started}
      stress-ng-io-heavy: {condition: service_started}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 20s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits: 
          cpus: '1.0'
          memory: "${OTELCOL_MAIN_MEMORY_LIMIT_MIB:-1024}M"

  ### Observer / Control-Plane Collector ###
  otelcol-observer:
    image: otel/opentelemetry-collector-contrib:0.103.1
    command: ["--config=/etc/otelcol/config.yaml"]
    env_file: .env
    environment:
      OTELCOL_OBSERVER_MEMBALLAST_MIB: ${OTELCOL_OBSERVER_MEMBALLAST_MIB:-64}
      GOMAXPROCS: ${OTELCOL_OBSERVER_GOMAXPROCS:-1}
      GOMEMLIMIT: ${OTELCOL_OBSERVER_MEMORY_LIMIT_MIB:-256}MiB
    volumes:
      - ./configs/otel/collectors/observer.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "9888:9888"   # Observer's Prometheus endpoint (for control script)
      - "13134:13133" # Health_check (remapped)
      - "1778:1777"   # pprof (remapped)
      - "55680:55679" # zpages (remapped)
    depends_on:
      otelcol-main: {condition: service_healthy, restart: true}
      prometheus: {condition: service_healthy, restart: true}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133"]
      interval: 20s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits: 
          cpus: '0.5'
          memory: "${OTELCOL_OBSERVER_MEMORY_LIMIT_MIB:-256}M"

  ### Control Loop Actuator Script ###
  control-loop-actuator:
    build:
      context: .
      dockerfile: apps/control-actuator/Dockerfile.actuator
    env_file: .env
    volumes:
      - ./apps/control-actuator/update-control-file.sh:/app/update-control-file.sh:ro
      - ./configs/control:/app/control_signals:rw
      - ./configs/control/optimization_mode_template.yaml:/app/optimization_mode_template.yaml:ro
    environment:
      PROMETHEUS_URL: "http://prometheus:9090"
    command: >
      sh -c "chmod +x /app/update-control-file.sh &&
             while true; do
               echo '[Actuator][$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")] Running update-control-file.sh...' &&
               /app/update-control-file.sh &&
               echo '[Actuator][$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")] Script finished. Sleeping for ${ADAPTIVE_CONTROLLER_INTERVAL_SECONDS:-60} seconds...' &&
               sleep ${ADAPTIVE_CONTROLLER_INTERVAL_SECONDS:-60} || sleep ${ADAPTIVE_CONTROLLER_INTERVAL_SECONDS:-60};
             done"
    depends_on:
      otelcol-observer: {condition: service_healthy, restart: true}
      prometheus: {condition: service_healthy, restart: true}
    restart: unless-stopped
    deploy:
      resources:
        limits: {cpus: '0.25', memory: '64M'}

  ### Synthetic Metrics Generator (Go based) ###
  synthetic-metrics-generator:
    build:
      context: ./apps/synthetic-generator
      dockerfile: Dockerfile
    env_file: .env
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "otelcol-main:4318"
      OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "delta"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=synthetic-generator-service,service.instance.id=${HOSTNAME:-generator}"
    depends_on:
      otelcol-main: {condition: service_healthy, restart: true}
    restart: unless-stopped
    deploy:
      resources:
        limits: { cpus: '0.5', memory: '256M' }

  ### Monitoring Stack ###
  prometheus:
    image: prom/prometheus:v2.52.0
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=24h'
    volumes:
      - ./configs/monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ./configs/monitoring/prometheus/rules:/etc/prometheus_rules:ro
      - ./data/prometheus:/prometheus
    ports: 
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana-oss:10.4.2
    env_file: .env
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - ./configs/monitoring/grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./configs/monitoring/grafana/dashboards_provider.yaml:/etc/grafana/provisioning/dashboards/provider.yaml:ro
      - ./configs/dashboards:/grafana_dashboards_provision_path:ro
      - ./data/grafana:/var/lib/grafana
    ports: 
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      prometheus: {condition: service_healthy, restart: true}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5